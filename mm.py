import asyncio
import emoji
from openpyxl import load_workbook
import json
import logging
import pandas as pd
from openpyxl.workbook import Workbook
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler,
    CallbackContext
)
from datetime import datetime, time, timedelta, date
from yookassa import Configuration, Payment, payment
import uuid

#YooKassa settings

ENTER_COMMENT = 1

Configuration.configure(account_id="1032619", secret_key="test_oAGk-KejRiNUifJhXcHtoBCXIiZYZB1E9YDHaBkEmUY")

#logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants
DATA_FILE = "Data.json"
ORDERS = "–ó–∞–∫–∞–∑—ã.xlsx"
MENU = "https://docs.google.com/spreadsheets/d/1eEEHGwtSV2znQDGJcgGVEQ2PzNTLoDPOT-9vtyQCoQY/export?format=csv"
ADDRESSES_FILE = "Addresses.json" 
TOKEN = "8178914232:AAEHHs8edmiStNxA5FelDC16fTo-NVidNaM"
ORDERS_JSON = "Orders.json"
CARD_NUMBER = "2222 3333 4444 5555"

CHOOSE_ADDRESS, ENTER_NAME, BROADCAST_MESSAGE, ADD_ADDRESS, ENTER_PHONE, SELECT_ROLE, ENTER_COMMENT = range(7)

def load_data(file_path, default):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return default
    except Exception as e:
        logger.error(f"Error loading data from {file_path}: {e}")
        return default

def save_data(file_path, data):
    try:
        with open(file_path, "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"Error saving data to {file_path}: {e}")

def load_user_data():
    return load_data(DATA_FILE, {"users": []})

def save_user_data(data):
    save_data(DATA_FILE, data)

def load_addresses():
    return load_data(ADDRESSES_FILE, {"addresses": []})

def save_addresses(data):
    save_data(ADDRESSES_FILE, data)

def load_menu_data():
    try:
        df = pd.read_csv(MENU)
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é: {e}")
        return None

def normalize_phone_number(phone_number):
    digits = ''.join(filter(str.isdigit, phone_number))
    if len(digits) == 11 and digits.startswith('8'):
        return '7' + digits[1:]
    elif len(digits) == 10 and digits.startswith('9'):
        return '7' + digits
    elif len(digits) == 11 and digits.startswith('7'):
        return digits
    elif len(digits) == 12 and digits.startswith('+7'):
        return digits
    return phone_number

async def under_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = context.user_data.get("phone verified")
    if phone is None:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î \n https://telegra.ph/Soglasie-obrabotki-PD-02-10",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω ‚úî")]],
                resize_keyboard=True, one_time_keyboard=True
            )
        )
    else:
        await start(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        load_user_data()
        user_data = load_user_data()
        chat_id = update.message.chat_id
        if context.user_data.get("phone_verified"):
            user = next((u for u in user_data["users"] if u.get("chat_id") == chat_id), None)
            if user:
                keyboard = get_role_keyboard(user.get("role", "–ó–∞–∫–∞–∑—á–∏–∫"))
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –í–∞—à–∞ —Ä–æ–ª—å üôã‚Äç‚ôÇÔ∏è: {user['role']}.",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return

        user = next((u for u in user_data["users"] if u.get("chat_id") == chat_id), None)
        if user:
            context.user_data["phone_verified"] = True
            context.user_data["phone_number"] = user["phone"]
            context.user_data["role"] = user.get("role", "–ó–∞–∫–∞–∑—á–∏–∫")

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['name']}, —Ä–æ–ª—å: {user['role']}")

            keyboard = get_role_keyboard(user.get("role", "–ó–∞–∫–∞–∑—á–∏–∫"))
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –í–∞—à–∞ —Ä–æ–ª—å: {user['role']}.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return

        contact = update.message.contact
        if contact:
            phone_number = normalize_phone_number(contact.phone_number)
            user = next((u for u in user_data["users"] if u["phone"] == phone_number), None)

            if user:
                context.user_data["phone_verified"] = True
                context.user_data["phone_number"] = phone_number
                context.user_data["role"] = user.get("role", "–ó–∞–∫–∞–∑—á–∏–∫")

                logger.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.user_data.get('role')}")

                keyboard = get_role_keyboard(user.get("role", "–ó–∞–∫–∞–∑—á–∏–∫"))
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –í–∞—à–∞ —Ä–æ–ª—å üôã‚Äç‚ôÇÔ∏è: {user['role']}.",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
            else:
                addresses = load_addresses().get("addresses", [])
                if not addresses:
                    await update.message.reply_text(
                        "–°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                    return

                context.user_data["phone_number"] = phone_number
                keyboard = [[InlineKeyboardButton(address, callback_data=address)] for address in addresses]
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üèò:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return CHOOSE_ADDRESS
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                    resize_keyboard=True, one_time_keyboard=True
                )
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    payment_id = query.data.split("_")[2]

    try:
        payment = Payment.find_one(payment_id)
        status = payment.status
        await query.edit_message_text(f'–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}')
    except Exception as e:
        await query.edit_message_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')

def get_role_keyboard(role):
    if role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        return [["–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", "–°–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º"], ["–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤"]]
    elif role == "–ó–∞–∫–∞–∑—á–∏–∫":
        return [["–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üç¥", "–ö–æ—Ä–∑–∏–Ω–∞ üóë"]]

async def choose_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        address = query.data
        phone_number = context.user_data.get("phone_number")
        if not phone_number:
            await query.edit_message_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        context.user_data["address"] = address
        await query.edit_message_text(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω: {address}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        return ENTER_NAME
    except Exception as e:
        logger.error(f"Error in choose_address: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = update.message.text
        phone_number = context.user_data.get("phone_number")
        address = context.user_data.get("address")

        if not phone_number or not address:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

        user_data = load_user_data()
        user_data["users"].append({"phone": phone_number, "role": "–ó–∞–∫–∞–∑—á–∏–∫", "address": address, "name": name, "chat_id": update.message.chat_id})
        save_user_data(user_data)

        await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
        role = context.user_data.get("role", "–ó–∞–∫–∞–∑—á–∏–∫")
        
        if role != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            keyboard = get_role_keyboard("–ó–∞–∫–∞–∑—á–∏–∫")
            await update.message.reply_text(
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å, {name}!",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        else:
            keyboard = get_role_keyboard("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in enter_name: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now()
    days = [today + timedelta(days=i) for i in range(7)]
    cutoff_time = time(20, 00) #–¢–£–¢ –ú–ï–ù–Ø–¢–¨ –í–†–ï–ú–Ø 10 - –ß–ê–°–´; 00 - –ú–ò–ù–£–¢–´!!!!!!!!!!!!!!!!!!!!!!!!!

    keyboard = []
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for day in days:
        if day.date() == today.date() and datetime.now().time() >= cutoff_time:
            continue
        day_name = days_of_week[day.weekday()]
        button_text = f"{day.strftime('%d.%m.%Y')} ({day_name})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=day.strftime('%d.%m.%Y'))])


    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÜ:", reply_markup=reply_markup)

async def handle_menu_and_lunch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update) and update.callback_query:
        query = update.callback_query
        selected_date_str = query.data
        selected_date_full = datetime.strptime(selected_date_str, '%d.%m.%Y')
        days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_index = selected_date_full.weekday()
        selected_day_name = days_of_week[day_index]

        await query.answer()
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É üìÜ: {selected_date_str} ({selected_day_name})")
        context.user_data["selected_date"] = selected_date_str
        context.user_data["selected_day_name"] = selected_day_name

        try:
            menu_data = pd.read_csv(MENU)
            menu_data['–¶–µ–Ω–∞'] = menu_data['–¶–µ–Ω–∞'].astype(str) + ' —Ä—É–±–ª–µ–π'

            week_number = selected_date_full.isocalendar()[1] % 2

            daily_menu = menu_data[(menu_data['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == selected_day_name) & (menu_data['–ù–µ–¥–µ–ª—è'] == week_number)]

            if daily_menu.empty:
                await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –º–µ–Ω—é.")
                return

            lunch_items = daily_menu.groupby('–ù–∞–∑–≤–∞–Ω–∏–µ').agg({'–ë–ª—é–¥–æ': list, '–¶–µ–Ω–∞': 'first'}).reset_index()

            menu_text = f"–ú–µ–Ω—é –Ω–∞ {selected_date_str} ({days_of_week[day_index]})\n\n"

            for index, row in lunch_items.iterrows():
                menu_text += f"*{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}* ({row['–¶–µ–Ω–∞']}):\n"
                for i, dish in enumerate(row['–ë–ª—é–¥–æ']):
                    menu_text += f"{i+1}. {dish}\n"
                menu_text += "\n"

            await query.message.reply_text(menu_text)

            complex_lunches = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥']['–ù–∞–∑–≤–∞–Ω–∏–µ'].unique().tolist()
            drinks = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–ù–∞–ø–∏—Ç–æ–∫']['–ë–ª—é–¥–æ'].unique().tolist()
            salads = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–°–∞–ª–∞—Ç']['–ë–ª—é–¥–æ'].unique().tolist()

            keyboard = []
            if complex_lunches:
                row = [KeyboardButton(option) for option in complex_lunches]
                keyboard.append(row)

            if drinks:
                row = [KeyboardButton(option) for option in drinks]
                keyboard.append(row)

            if salads:
                row = [KeyboardButton(option) for option in salads]
                keyboard.append(row)

            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥ üîô")])
            keyboard.append([KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üóë")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ–¥ üçú:", reply_markup=reply_markup)

        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é: {e}")
            return

    elif isinstance(update, Update) and update.message and update.message.text:
        message = update.message.text
        phone = context.user_data.get("phone_number")
        if phone is None:
            await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
            return
        
        selected_date = context.user_data.get("selected_date")
        selected_day_name = context.user_data.get("selected_day_name")

        if selected_date is None:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–µ–¥.")
            return

        try:
            menu_data = pd.read_csv(MENU)
            daily_menu = menu_data[menu_data['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == selected_day_name] 

            if message in daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'].unique():
                complex_lunch_options = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == message]
                if not complex_lunch_options.empty:
                    price = complex_lunch_options['–¶–µ–Ω–∞'].iloc[0]
                else:
                    await update.message.reply_text(f"–¶–µ–Ω–∞ –¥–ª—è {message} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")
                    return

            else:
                price_row = daily_menu[daily_menu['–ë–ª—é–¥–æ'] == message]
                if not price_row.empty:
                    price = price_row['–¶–µ–Ω–∞'].iloc[0]
                else:
                    await update.message.reply_text(f"–¶–µ–Ω–∞ –¥–ª—è {message} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")
                    return


            try:
                with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                    try:
                        orders = json.load(f)

                        if not isinstance(orders, list):
                            orders = []
                    except json.JSONDecodeError:

                        orders = []
            except FileNotFoundError:

                orders = []


            new_order = {
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": phone,
                "–î–∞—Ç–∞": selected_date,
                "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": selected_day_name,
                "–û–±–µ–¥": message,
                "–¶–µ–Ω–∞": int(price),
            }
            try:
                with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                    try:
                        orders = json.load(f)
                        if not isinstance(orders, list):
                            orders = []
                    except json.JSONDecodeError:
                        orders = []
            except FileNotFoundError:
                orders = []

            orders.append(new_order)

            with open(ORDERS_JSON, 'w', encoding='utf-8') as f:
                json.dump(orders, f, ensure_ascii=False, indent=4)


            await update.message.reply_text(f"–í–∞—à –≤—ã–±–æ—Ä ({message}) –∑–∞–ø–∏—Å–∞–Ω! –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.")

            daily_menu = menu_data[menu_data['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] == selected_day_name]
            complex_lunches = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥']['–ù–∞–∑–≤–∞–Ω–∏–µ'].unique().tolist()
            drinks = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–ù–∞–ø–∏—Ç–æ–∫']['–ë–ª—é–¥–æ'].unique().tolist()
            salads = daily_menu[daily_menu['–ù–∞–∑–≤–∞–Ω–∏–µ'] == '–°–∞–ª–∞—Ç']['–ë–ª—é–¥–æ'].unique().tolist()

            keyboard = []
            if complex_lunches:
                row = [KeyboardButton(option) for option in complex_lunches]
                keyboard.append(row)

            if drinks:
                row = [KeyboardButton(option) for option in drinks]
                keyboard.append(row)

            if salads:
                row = [KeyboardButton(option) for option in salads]
                keyboard.append(row)

            keyboard.append([KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ':", reply_markup=reply_markup)

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞: {e}")
            return

async def move_orders_to_excel(phone, payment_status="–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", orders_json_path=ORDERS_JSON, orders_excel_path=ORDERS):
    try:
        with open(orders_json_path, "r", encoding="utf-8") as f:
            orders = json.load(f)

        user_orders = [order for order in orders if str(order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")).strip() == str(phone).strip()]
        if not user_orders:
            return False, []

        order_id = str(uuid.uuid4())

        for order in user_orders:
            order["order_id"] = order_id
            order["–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"] = payment_status
            order["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = order.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")


        try:
            wb = load_workbook(orders_excel_path)
            sheet = wb.active
        except FileNotFoundError:
            wb = Workbook()
            sheet = wb.active

            sheet.append([
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–î–∞—Ç–∞", "–û–±–µ–¥", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
                "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞", "order_id", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ])

        for order in user_orders:
            sheet.append([
                order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", ""),
                order.get("–î–∞—Ç–∞", ""),
                order.get("–û–±–µ–¥", ""),
                order.get("–¶–µ–Ω–∞", ""),
                order.get("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", ""),
                order.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", ""),
                order.get("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", ""),
                order.get("–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞", ""),
                order.get("order_id", ""),
                order.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            ])


        wb.save(orders_excel_path)

        remaining_orders = [order for order in orders if str(order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")).strip() != str(phone).strip()]
        with open(orders_json_path, "w", encoding="utf-8") as f:
            json.dump(remaining_orders, f, ensure_ascii=False, indent=4)

        return True, order_id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤ Excel: {e}")
        return False, None


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data.get("role") == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        keyboard = [["–ú–µ–Ω—é", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–ö–æ—Ä–∑–∏–Ω–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error in menu: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = context.user_data.get("role")
    logger.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ broadcast_start: {role}")

    if role != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message.text
        user_data = load_user_data()

        for user in user_data["users"]:
            chat_id = user.get("chat_id")
            if chat_id:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=f"[–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚úâ]\n{message}")
                except Exception as e:
                    logger.error(f"Error sending message to {chat_id}: {e}")

        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in broadcast_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def add_address_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = context.user_data.get("role")
    logger.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ add_address_start: {role}")

    if role != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚ùå.")
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üèö.")
    return ADD_ADDRESS

async def add_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text
        addresses = load_addresses()
        addresses["addresses"].append(address)
        save_addresses(addresses)

        await update.message.reply_text(f"–ê–¥—Ä–µ—Å '{address}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in add_address: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É

        if text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üç¥":
            await show_menu(update, context)
        elif context.user_data.get("awaiting_comment"):
            await handle_comment(update, context)
            return
        elif text == "–ö–æ—Ä–∑–∏–Ω–∞ üóë":
            await show_cart(update, context)
        elif text == "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤":
            await show_all_orders(update, context)
        elif text == "–°–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º":
            await broadcast_start(update, context)
        elif text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ ":
            await add_address_start(update, context)
        elif text == "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥":
            await handle_complex_lunch(update, context, "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥")
        elif text == "–ú–æ—Ä—Å":
            await handle_drink(update, context, "–ú–æ—Ä—Å")
        elif text == "–ö–æ–º–ø–æ—Ç":
            await handle_drink(update, context, "–ö–æ–º–ø–æ—Ç")
        elif text == "–¶–µ–∑–∞—Ä—å —Å —Å—ë–º–≥–æ–π":
            await handle_salad(update, context, "–¶–µ–∑–∞—Ä—å —Å —Å—ë–º–≥–æ–π")
        elif text == "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π":
            await handle_salad(update, context, "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π")
        elif text == "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–πüí≥":
            await pay(update, context)
        elif text == "–ù–∞–∑–∞–¥ üîô":
            await show_menu(update, context)
        elif text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ":
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
        elif text.startswith("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ "):
            next_day_str = text.replace("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ ", "")
            context.user_data["selected_date"] = next_day_str
            await show_menu(update, context)
        elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
        elif text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É‚ùå":
            await clear_cart(update, context)
        elif text == "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤":
            await import_excel(update, context)
        elif text == "–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏":
            if update.callback_query:
                pass
            else:
                await handle_payment_selection(update, context)
        elif text == "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω ‚úî":
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
            await start(update, context)

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def import_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = context.user_data.get("role")
    if role != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    await update.message.reply_document(ORDERS)


async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone_number = context.user_data.get("phone_number")
        if not phone_number:
            await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return
        try:
            with open(ORDERS_JSON, "r", encoding="utf-8") as f:
                orders = json.load(f)
        except FileNotFoundError:
            await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç—É")
            return
        except json.JSONDecodeError:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ñ–∞–π–ª—É")
            return
        
        initial_count = len(orders)
        orders = [order for order in orders if order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞") != phone_number]

        with open(ORDERS_JSON, "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)

        if len(orders) < initial_count:
            await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        else:
            await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        selected_date = context.user_data.get("selected_date")
        phone_number = context.user_data.get("phone_number")

        if not selected_date or not phone_number:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ.")
            return

        try:
            orders_df = pd.read_excel(ORDERS)
        except FileNotFoundError:
            await update.message.reply_text("–§–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        phone_number_clean = ''.join(filter(str.isdigit, phone_number))
        orders_df['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'] = orders_df['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'].astype(str).str.replace('[^0-9]', '', regex=True)

        user_orders = orders_df[
            (orders_df['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'] == phone_number_clean) &
            (orders_df['–î–∞—Ç–∞'] == selected_date)
        ]

        if user_orders.empty:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        orders_df = orders_df[
            ~((orders_df['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'] == phone_number_clean) &
              (orders_df['–î–∞—Ç–∞'] == selected_date))
        ]
        orders_df.to_excel(ORDERS, index=False)

        await update.message.reply_text("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        role = context.user_data.get("role", "–ó–∞–∫–∞–∑—á–∏–∫")
        if role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            keyboard = [
                ["–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", "–°–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º"],
                ["–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–ò–º–ø–æ—Ä—Ç chat_id"]
            ]
        else:
            keyboard = [
                ["–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üç¥", "–ö–æ—Ä–∑–∏–Ω–∞ üóë"]
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        await handle_buttons(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_drink(update: Update, context: ContextTypes.DEFAULT_TYPE, drink_name: str):
    user_data = load_user_data()
    pay = context.user_data.get("payment_id")
    try:
            phone = context.user_data.get("phone_number")
            user = next((u for u in user_data["users"] if u["phone"] == phone), None)
            if phone is None:
                await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
                return
            selected_date = context.user_data.get("selected_date")
            if selected_date is None:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–µ–¥.")
                return
            selected_day_name = context.user_data.get("selected_day_name")
            address = user['address']
            if address is None:
                await update.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
                return

            try:
                menu_data = pd.read_csv(MENU)
                drink_price = dict(zip(menu_data['–ë–ª—é–¥–æ'], menu_data['–¶–µ–Ω–∞']))

                price = drink_price.get(drink_name)
                if price is None:
                    await update.message.reply_text(f"–¶–µ–Ω–∞ –¥–ª—è {drink_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")
                    return
                try:
                    with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                        try:
                            orders = json.load(f)

                            if not isinstance(orders, list):
                                orders = []
                        except json.JSONDecodeError:

                            orders = []
                except FileNotFoundError:

                    orders = []

                new_order = {
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": phone,
                "–î–∞—Ç–∞": selected_date,
                "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": selected_day_name,
                "–û–±–µ–¥": drink_name,
                "–¶–µ–Ω–∞": int(price),
                "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã": "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
                "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏": address,
                "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞": user["name"],
                }
                try:
                    with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                        try:
                            orders = json.load(f)
                            if not isinstance(orders, list):
                                orders = []
                        except json.JSONDecodeError:
                            orders = []
                except FileNotFoundError:
                    orders = []

                orders.append(new_order)

                with open(ORDERS_JSON, 'w', encoding='utf-8') as f:
                    json.dump(orders, f, ensure_ascii=False, indent=4)
                logger.info(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {drink_name}, —Ü–µ–Ω–∞: {price}, –¥–∞—Ç–∞: {selected_date}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
                await update.message.reply_text(f"–í–∞—à –≤—ã–±–æ—Ä ({drink_name}) –∑–∞–ø–∏—Å–∞–Ω! –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
   
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_salad(update: Update, context: ContextTypes.DEFAULT_TYPE, salad_name: str):
    user_data = load_user_data()
    try:
            phone = context.user_data.get("phone_number")
            user = next((u for u in user_data["users"] if u["phone"] == phone), None)
            if phone is None:
                await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
                return
            selected_date = context.user_data.get("selected_date")
            if selected_date is None:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–µ–¥.")
                return
            selected_day_name = context.user_data.get("selected_day_name")
            address = user['address']
            if address is None:
                await update.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
                return
            try:
                menu_data = pd.read_csv(MENU)
                salad_price = dict(zip(menu_data['–ë–ª—é–¥–æ'], menu_data['–¶–µ–Ω–∞']))

                price = salad_price.get(salad_name)
                if price is None:
                    await update.message.reply_text(f"–¶–µ–Ω–∞ –¥–ª—è {salad_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")
                    return
                try:
                    with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                        try:
                            orders = json.load(f)

                            if not isinstance(orders, list):
                                orders = []
                        except json.JSONDecodeError:

                            orders = []
                except FileNotFoundError:

                    orders = []

                new_order = {
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": phone,
                "–î–∞—Ç–∞": selected_date,
                "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": selected_day_name,
                "–û–±–µ–¥": salad_name,
                "–¶–µ–Ω–∞": int(price),
                "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã": "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
                "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏": address,
                "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞": user["name"],
                }
                try:
                    with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                        try:
                            orders = json.load(f)
                            if not isinstance(orders, list):
                                orders = []
                        except json.JSONDecodeError:
                            orders = []
                except FileNotFoundError:
                    orders = []

                orders.append(new_order)

                with open(ORDERS_JSON, 'w', encoding='utf-8') as f:
                    json.dump(orders, f, ensure_ascii=False, indent=4)
                logger.info(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {salad_name}, —Ü–µ–Ω–∞: {price}, –¥–∞—Ç–∞: {selected_date}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
                await update.message.reply_text(f"–í–∞—à –≤—ã–±–æ—Ä ({salad_name}) –∑–∞–ø–∏—Å–∞–Ω! –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_complex_lunch(update: Update, context: ContextTypes.DEFAULT_TYPE, lunch_name: str):
    user_data = load_user_data()
    try:
        phone = context.user_data.get("phone_number")
        user = next((u for u in user_data["users"] if u["phone"] == phone), None)
        if phone is None:
            await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
            return

        selected_date = context.user_data.get("selected_date")
        if selected_date is None:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–µ–¥.")
            return
        selected_day_name = context.user_data.get("selected_day_name")
        address = user['address']
        if address is None:
            await update.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
            return
        try:
            menu_data = pd.read_csv(MENU)
            lunch_prices = dict(zip(menu_data['–ù–∞–∑–≤–∞–Ω–∏–µ'], menu_data['–¶–µ–Ω–∞']))

            price = lunch_prices.get(lunch_name)
            if price is None:
                await update.message.reply_text(f"–¶–µ–Ω–∞ –¥–ª—è {lunch_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")
                return
            try:
                with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                    try:
                        orders = json.load(f)

                        if not isinstance(orders, list):
                            orders = []
                    except json.JSONDecodeError:

                        orders = []
            except FileNotFoundError:

                orders = []


            new_order = {
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": phone,
            "–î–∞—Ç–∞": selected_date,
            "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": selected_day_name,
            "–û–±–µ–¥": lunch_name,
            "–¶–µ–Ω–∞": int(price),
            "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã": "–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ",
            "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏": address,
            "–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞": user["name"]
            }
            try:
                with open(ORDERS_JSON, 'r', encoding='utf-8') as f:
                    try:
                        orders = json.load(f)
                        if not isinstance(orders, list):
                            orders = []
                    except json.JSONDecodeError:
                        orders = []
            except FileNotFoundError:
                orders = []

            orders.append(new_order)

            with open(ORDERS_JSON, 'w', encoding='utf-8') as f:
                json.dump(orders, f, ensure_ascii=False, indent=4)
            logger.info(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {lunch_name}, —Ü–µ–Ω–∞: {price}, –¥–∞—Ç–∞: {selected_date}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
            await update.message.reply_text(f"–í–∞—à –≤—ã–±–æ—Ä ({lunch_name}) –∑–∞–ø–∏—Å–∞–Ω! –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–µ–¥–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_option = update.message.text
    phone = context.user_data.get("phone_number")

    if phone is None:
        await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
        return

    if selected_option == "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–πüí≥":
        await pay(update, context)
        return

    elif selected_option == "–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏":
        success, order_id = await move_orders_to_excel(phone, "–ù–∞–ª–∏—á–Ω—ã–º–∏")
        if success:
            await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")
            await show_main_menu(update, context)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–∫–∞–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.")

    elif selected_option == "–ù–∞–∑–∞–¥ üîô":
        await show_menu(update, context)
        return
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    payment_keyboard = [["–ù–∞–∑–∞–¥ üîô"]]
    await update.message.reply_text(
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥",
        reply_markup=ReplyKeyboardMarkup(payment_keyboard, resize_keyboard=True)
    )


async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ —Å —Å—É–º–º–æ–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    total_price = context.user_data.get("total_price", 0)
    if total_price == 0:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    try:
        payment = Payment.create({
            "amount": {"value": f"{total_price}.00", "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://t.me/DirTasteBot"},
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É {total_price} —Ä—É–±–ª–µ–π"
        })

        context.user_data['payment_id'] = payment.id

        await update.message.reply_text(
            f'–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ({payment.confirmation.confirmation_url}) –¥–ª—è –æ–ø–ª–∞—Ç—ã.',
            parse_mode='Markdown'
        )

        asyncio.create_task(check_payment_status(update, context, payment.id))

    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')

async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id: str) -> None:
    while True:
        await asyncio.sleep(10)

        try:
            payment = Payment.find_one(payment_id)
            status = payment.status

            if status == 'succeeded':
                phone = context.user_data.get("phone_number")
                if phone:
                    success, order_id = await move_orders_to_excel(phone, "–ö–∞—Ä—Ç–æ–π")
                    if success:
                        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")
                        await show_main_menu(update, context)
                    else:
                        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–∫–∞–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.")
                break
            elif status == 'canceled':
                await update.message.reply_text(f'–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω.')
                break
            context.user_data['payment.status'] = status
        except Exception as e:
            await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')
            break

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):

    phone = context.user_data.get("phone_number")

    if phone is None:
        await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!")
        return ConversationHandler.END

    try:
        with open(ORDERS_JSON, "r", encoding="utf-8") as f:
            orders = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.")
        return ConversationHandler.END

    user_orders = [order for order in orders if order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞") == phone]

    if not user_orders:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return ConversationHandler.END

    from collections import defaultdict
    grouped_orders = defaultdict(lambda: {"–ë–ª—é–¥–∞": [], "–¶–µ–Ω–∞": 0, "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": ""})

    for order in user_orders:
        date = order["–î–∞—Ç–∞"]
        grouped_orders[date]["–ë–ª—é–¥–∞"].append(order["–û–±–µ–¥"])
        grouped_orders[date]["–¶–µ–Ω–∞"] += order["–¶–µ–Ω–∞"]
        grouped_orders[date]["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] = order["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"]

    total_price = sum(details["–¶–µ–Ω–∞"] for details in grouped_orders.values())
    context.user_data["total_price"] = total_price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É

    cart_message = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    for date, details in grouped_orders.items():
        cart_message += (
            f"üìÖ *–î–∞—Ç–∞*: {date} ({details['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']})\n"
            f"üçΩ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞*: {', '.join(details['–ë–ª—é–¥–∞'])}\n"
            f"üí∞ *–¶–µ–Ω–∞*: {details['–¶–µ–Ω–∞']} —Ä—É–±–ª–µ–π\n\n"
        )
    cart_message += f"üíµ *–û–±—â–∞—è —Å—É–º–º–∞*: {total_price} —Ä—É–±–ª–µ–π"

    await update.message.reply_text(cart_message, parse_mode="Markdown")
    context.user_data["awaiting_comment"] = True
    keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("üìù –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'.", reply_markup=reply_markup)

    return ENTER_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.")
    else:
        comment = text
        await update.message.reply_text(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {comment}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")

    context.user_data["comment"] = comment
    context.user_data["awaiting_comment"] = False

    phone = context.user_data.get("phone_number")
    if phone:
        try:
            with open(ORDERS_JSON, "r", encoding="utf-8") as f:
                orders = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            orders = []

        for order in orders:
            if order.get("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞") == phone:
                order["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = comment

        with open(ORDERS_JSON, "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)

    return await show_payment_options(update, context)

async def show_payment_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–πüí≥"], ["–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏"], ["–ù–∞–∑–∞–¥ üîô"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    return ConversationHandler.END

async def show_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("role") != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        orders_df = pd.read_excel(ORDERS)
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if orders_df.empty:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    today = datetime.today().date()
    todaystr = today.strftime("%d.%m.%Y")
    today_orders = orders_df[orders_df['–î–∞—Ç–∞'] == todaystr]
    if today_orders.empty:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
        return
    dish_count = {}
    dish_count_end = {}
    for index, row in today_orders.iterrows():
        address = row['–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏']
        dish = row['–û–±–µ–¥']
        if address not in dish_count:
            dish_count[address] = {}
        if dish not in dish_count[address]:
            dish_count[address][dish] = 1
        else:
            dish_count[address][dish] += 1
        if dish not in dish_count_end:
            dish_count_end[dish] = 1
        else:
            dish_count_end[dish] += 1
    orders_text = "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for address, dishes in dish_count.items():
        orders_text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
        for dish, count in dishes.items():
            orders_text += f"  - {dish}: {count}\n"
        orders_text += "\n"

    await update.message.reply_text(orders_text)

    orders_text = "–ò—Ç–æ–≥–æ:\n"
    for dish, count in dish_count_end.items():
        orders_text += f"  - {dish}: {count}\n"

    await update.message.reply_text(orders_text)

def main():
    try:
        application = Application.builder().token(TOKEN).build()

        registration_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.CONTACT, start)],
            states={
                CHOOSE_ADDRESS: [CallbackQueryHandler(choose_address)],
                ENTER_NAME: [MessageHandler(filters.TEXT, enter_name)],
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        )

        broadcast_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–°–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º$"), broadcast_start)],
            states={
                BROADCAST_MESSAGE: [MessageHandler(filters.TEXT, broadcast_message)],
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        )

        address_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏$"), add_address_start)],
            states={
                ADD_ADDRESS: [MessageHandler(filters.TEXT, add_address)],
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        )
        comment_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–ö–æ—Ä–∑–∏–Ω–∞ üóë$"), show_cart)],
            states={
                ENTER_COMMENT: [MessageHandler(filters.TEXT, handle_comment)]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        application.add_handler(CommandHandler("start", under_start))
        application.add_handler(registration_handler)
        application.add_handler(broadcast_handler)
        application.add_handler(address_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        application.add_handler(CallbackQueryHandler(handle_menu_and_lunch))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        application.add_handler(MessageHandler(filters.Regex("^–ö–æ—Ä–∑–∏–Ω–∞ üóë$"), show_cart))
        application.add_handler(comment_handler)
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    main()
